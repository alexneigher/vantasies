- return nil if @van.is_paid?

.row-fluid
  .not-paid-warning
    THIS POST IS NOT LIVE. ONLY YOU (THE AUTHOR) CAN SEE THIS PAGE. PLEASE PAY US TO MAKE IT LIVE :)
    %a{"data-target" => "#paymentModal", "data-toggle" => "modal", :href => "#paymentModal"} PAY NOW


/ Modal
#paymentModal.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "paymentModal", :role => "dialog", :tabindex => "-1"}
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
          %span{"aria-hidden" => "true"} Ã—
        %h4#paymentModalLabel.modal-title Get your van posted
      .modal-body
        %form#payment-form{:action => "/charge", :method => "post"}
          .form-row
            $99 dolla
          .form-row
            %label{:for => "card-element"}
              Credit or debit card
            #card-element
            #card-errors{:role => "alert"}
          %button Submit Payment

        .hidden
          = form_tag charges_path, method: :post, id: 'chargeForm' do
            = text_field_tag ['stripe_token']
            = text_field_tag ['user_id'], current_user.id
            = text_field_tag ['van_id'], @van.id

      .modal-footer
        %button.btn.btn-primary{"data-dismiss" => "modal", :type => "button"} Close

%script{:src => "https://js.stripe.com/v3/"}
:javascript
  $('#paymentModal').modal('show');
  // Create a Stripe client
  var stripe = Stripe("#{ENV['STRIPE_PUBLIC_KEY']}");
  // Create an instance of Elements
  var elements = stripe.elements();
  // Custom styling can be passed to options when creating an Element.
  // (Note that this demo uses a wider set of styles than the guide below.)
  var style = {
    base: {
      color: '#32325d',
      lineHeight: '24px',
      fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
      fontSmoothing: 'antialiased',
      fontSize: '16px',
      '::placeholder': {
        color: '#aab7c4'
      }
    },
    invalid: {
      color: '#fa755a',
      iconColor: '#fa755a'
    }
  };

  // Create an instance of the card Element
  var card = elements.create('card', {style: style});

  // Add an instance of the card Element into the `card-element` <div>
  card.mount('#card-element');

  // Handle real-time validation errors from the card Element.
  card.addEventListener('change', function(event) {
    var displayError = document.getElementById('card-errors');
    if (event.error) {
      displayError.textContent = event.error.message;
    } else {
      displayError.textContent = '';
    }
  });

  // Handle form submission
  var form = document.getElementById('payment-form');
  form.addEventListener('submit', function(event) {
    event.preventDefault();

    stripe.createToken(card).then(function(result) {
      if (result.error) {
        // Inform the user if there was an error
        var errorElement = document.getElementById('card-errors');
        errorElement.textContent = result.error.message;
      } else {
        // Populate the token param
        console.log(result.token)
        $('#__stripe_token_').val(result.token.id);
        $('#chargeForm').submit();
      }
    });
  });